# -*- coding: utf-8 -*-
"""decision_tree_and_random_forest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YBhJKBXf44nTTrXiNjukX0Y3jIrU4cx6

import 工具

##http://www.taroballz.com/2019/05/15/ML_decision_tree_detail/

## https://www.youtube.com/watch?v=7VeUPuFGJHk
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# %matplotlib inline

"""## load data

### 授權
"""

from google.colab import drive
drive.mount('/content/drive/')

"""### 路徑"""

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/My Drive/III_decision_tree_svm/

"""### 讀data"""

df = pd.read_csv("kyphosis.csv")



"""## 探索資料"""

df.head()

df.info()

df.describe()

plt.figure(figsize=(20,15))
sns.pairplot(df, hue='Kyphosis')

"""## visuallization

## 切割資料
"""

from sklearn.model_selection import  train_test_split

X = df.drop('Kyphosis', axis= 1)
y = df['Kyphosis']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

"""## Decision tree"""

from sklearn.tree import  DecisionTreeClassifier

dtree = DecisionTreeClassifier()

dtree.fit(X_train, y_train)



"""## Prediction and Evaluation"""

predictions = dtree.predict(X_test)

from sklearn.metrics import classification_report, confusion_matrix

print(classification_report(y_test, predictions))

print(confusion_matrix(y_test, predictions))

"""## Tree visualization"""

from IPython.display import  Image
from sklearn.externals.six import  StringIO
from sklearn.tree import  export_graphviz
import pydot

features = list(df.columns[1:])
features

dot_data = StringIO()
export_graphviz(dtree, out_file= dot_data, feature_names= features, filled = True, rounded= True)

graph = pydot.graph_from_dot_data(dot_data.getvalue())
Image(graph[0].create_png())



"""## Random Forests"""

from sklearn.ensemble import RandomForestClassifier
rfc = RandomForestClassifier(n_estimators = 100)

rfc.fit(X_train, y_train)

rfc_pred = rfc.predict(X_test)

print(confusion_matrix(y_test, rfc_pred))

print(classification_report(y_test, rfc_pred))

"""##重要性萃取"""

for name, score in zip(list(df.columns)[1:],rfc.feature_importances_):
  print(name, score)

